(load "list.scm")
(load "matrix.scm")
(load "graph-basic.scm")

(define (make-graph vertex edge)
  (let* ((s (length vertex))
         (m (make-matrix s s 0)))
    (do (e edge (cdr e))
      ((null? e) m)
      (matrix-set! m (car e) (cdr e) 1)
      (matrix-set! m (cdr e) (car e) 1))
    (list 'graph vertex m)))

;;; This is for make directed graphics.
(define (make-digraph vertex edge)
  (let* ((s (length vertex))
         (m (make-matrix s s 0)))
    (do (e edge (cdr e))
      ((null? e) m)
      (matrix-set! m (car e) (cdr r) 1))
    (list 'digraph)))

(define (vertex-neighbors vertex graph)
  (let ((s (length (graph-vertex graph)))
        (neibor '()))
    (do (i (- s 1) (- 1 i))
      ((= i 0) neibor)
      (if (vertex-adjacent? vertex (matrix-ref vertex i))
        (append! neibor (list i))))))

(define (vertex-adjacent? v1 v2 graph)
  (let ((l (graph-vertex graph)))
    (if (node? v1) (set! v1 (list-index l v1)))
    (if (node? v2) (set! v2 (list-index l v2)))
    (= 1 (matrix-ref v1 v2 (list-ref graph 2)))))
